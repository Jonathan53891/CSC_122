1) How many libraries did you create for your hierarchy? 
Do all of them have both interface and implementation files?
I created 11 libraries, all of these were just header files because
all of the functions were less than 10 lines so I just defined them
in the class
2) How can you store information about so many different classes 
in a single container?
You can do this through inheritance, shape being the base class, then 
1D/2D/3D being the derived classes. Then from there, Line, curve, circle,
rectangle, sphere, cube and cone are all derived classes for their respective
dimension class


3)What does that new keyword virtual have to do with any of this?
You need to have virtual when implementing polymorphism so that when in the
main function when you try to call a function form the shape object, it will
find the function for the specific shape instead of a general "Shape" function

4) Will you ever need/want to create an object of type Shape, OneD, TwoD, or 
ThreeD? How can you assure that this won't happen?
No, so create a pure abstract function. ex:
virtual void print(std::ostream & out) const = 0;

5)What other methods/operators might prove useful in an application for 
drawing shapes? What if the application were more of a computer-aided 
instruction in geometry? Is there a need to limit your classes?
Some other methods that would be useful would be methods that calculate
perimeter, surface area, volume, etc. Or for the curve calculating the distance.
Basically, any function that can calculate something from its given dimension

6) What kind of container should you use to store the Shapes: 
dynamic array, static array, templated dynamic Array class, vector, ...
I used a vector of pointers to the shape object, so the base <Shape*>
